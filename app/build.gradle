
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    id 'kotlin-kapt'
    id("com.google.devtools.ksp")
    id 'com.google.dagger.hilt.android'

    id 'com.google.gms.google-services'

}

def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.exists()) {
    localProps.load(new FileInputStream(localPropsFile))
}
def yandexKey = localProps.getProperty("YANDEX_MAPKIT_API_KEY", "")

android {
    namespace 'ru.wizand.safeorbit'
    compileSdk 35

    defaultConfig {
        applicationId "ru.wizand.safeorbit"
        minSdk 29
        targetSdk 35
        versionCode 15
        versionName "1.6.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Проброс в BuildConfig и манифест
        buildConfigField "String", "YANDEX_MAPKIT_API_KEY", "\"${yandexKey}\""
        manifestPlaceholders = [YANDEX_MAPKIT_API_KEY: yandexKey]

        def agoraAppId = localProps.getProperty("AGORA_APP_ID", "")
        manifestPlaceholders = [
                YANDEX_MAPKIT_API_KEY: yandexKey,
                AGORA_APP_ID: agoraAppId
        ]

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true // ← вот это нужно добавить
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    splits {
        abi {
            enable true
            reset()
            // Оставляем только нужные архитектуры для реальных Android-устройств:
            include 'armeabi-v7a', 'arm64-v8a'
            universalApk true // отключаем универсальный APK с ВСЕМИ ABI
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material

    implementation libs.androidx.activity
    implementation libs.androidx.constraintlayout
    implementation libs.firebase.database.ktx
    implementation libs.firebase.auth.ktx
    implementation libs.androidx.fragment.ktx

    implementation libs.maps.mobile

    implementation libs.androidx.recyclerview

    implementation libs.firebase.storage.ktx
    implementation libs.firebase.perf.ktx
    implementation libs.firebase.bom
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    // Lifecycle ViewModel + LiveData
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx

//    Hilt
    implementation libs.hilt.android
    ksp libs.hilt.compiler

    // Kotlin Coroutines
    implementation libs.kotlinx.coroutines.android

    def room_version = "2.7.1"

    implementation "androidx.room:room-runtime:$room_version"

    // If this project uses any Kotlin source, use Kotlin Symbol Processing (KSP)
    // See KSP Quickstart to add KSP to your build
    ksp "androidx.room:room-compiler:$room_version"

    // Для Kotlin coroutines
    implementation "androidx.room:room-ktx:$room_version"

    implementation libs.play.services.location

    implementation libs.androidx.work.runtime.ktx

    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
// Agola
    implementation("io.agora.rtc:voice-sdk:4.5.0")
//    implementation("io.agora.rtc:full-sdk:4.5.2")

// LiveKit
//    implementation libs.livekit.android

    // QR Codes
    implementation libs.core
    implementation libs.zxing.android.embedded

}
apply plugin: 'com.google.gms.google-services'