package ru.wizand.safeorbit.presentation.server

import android.Manifest
import android.app.*
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.content.pm.PackageManager
import android.content.pm.ServiceInfo
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.location.Location
import android.location.LocationListener
import android.location.LocationManager
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.localbroadcastmanager.content.LocalBroadcastManager
import androidx.room.Room
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import ru.wizand.safeorbit.R
import ru.wizand.safeorbit.data.ActivityLogEntity
import ru.wizand.safeorbit.data.AppDatabase
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class LocationService : Service(), LocationListener, SensorEventListener {

    private lateinit var locationManager: LocationManager
    private lateinit var sensorManager: SensorManager
    private lateinit var prefs: SharedPreferences

    private var serverId: String = ""
    private var lastSentTime: Long = 0L
    private var lastSentLocation: Location? = null
    private var lastStepTime: Long = 0L
    private var isInActiveMode: Boolean = false

    private var initialStepCount: Float? = null
    private var lastStepCount: Float = 0f
    private var lastStepEventTime: Long = 0L

    private val ACTIVE_INTERVAL = 30_000L // 30 —Å–µ–∫
    private var inactivityTimeout: Long = 5 * 60 * 1000L // default 5 –º–∏–Ω—É—Ç

    private val preferenceChangeListener = SharedPreferences.OnSharedPreferenceChangeListener { _, key ->
        if (key == "inactivity_timeout") {
            val newTimeout = prefs.getLong("inactivity_timeout", inactivityTimeout)
            Log.d("LocationService", "üîÑ inactivity_timeout –æ–±–Ω–æ–≤–ª—ë–Ω: $inactivityTimeout ‚Üí $newTimeout")
            inactivityTimeout = newTimeout
            if (!isInActiveMode) {
                switchToIdleMode()
            }
        }
    }

    private fun loadSettings() {
        inactivityTimeout = prefs.getLong("inactivity_timeout", 5 * 60 * 1000L)
    }

    override fun onCreate() {
        super.onCreate()
        prefs = getSharedPreferences("app_prefs", MODE_PRIVATE)
        prefs.registerOnSharedPreferenceChangeListener(preferenceChangeListener)
        loadSettings()
        startForegroundWithNotification()
        setupStepSensor()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        serverId = intent?.getStringExtra("server_id") ?: ""

        if (!hasLocationPermission()) {
            stopSelf()
            return START_NOT_STICKY
        }

        locationManager = getSystemService(LOCATION_SERVICE) as LocationManager
        switchToIdleMode()
        return START_STICKY
    }

    override fun onLocationChanged(location: Location) {
        val now = System.currentTimeMillis()
        val isFirst = lastSentLocation == null
        val timeSinceLast = now - lastSentTime
        val distanceMoved = lastSentLocation?.distanceTo(location) ?: Float.MAX_VALUE
        val stepRecently = now - lastStepTime < 2 * 60 * 1000L

        val isActive = distanceMoved > 50f || stepRecently
        val isDueByTime = timeSinceLast > inactivityTimeout
        val shouldSend = isFirst || isActive || isDueByTime

        Log.d("LocationService", "üìç Location: ${location.latitude}, ${location.longitude}, Œî=$distanceMoved m, steps recent=$stepRecently")

        if (shouldSend) {
            lastSentLocation = location
            lastSentTime = now
            broadcastLocation(location)
        }

        if (isActive && !isInActiveMode) {
            switchToActiveMode()
        } else if (!stepRecently && isInActiveMode && timeSinceLast > inactivityTimeout) {
            switchToIdleMode()
        }
    }

    private fun switchToActiveMode() {
        Log.d("LocationService", "üîÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ê–ö–¢–ò–í–ù–´–ô —Ä–µ–∂–∏–º")
        isInActiveMode = true
        try {
            locationManager.removeUpdates(this)
            if (!hasLocationPermission()) return
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return
            }
            locationManager.requestLocationUpdates(
                LocationManager.GPS_PROVIDER,
                ACTIVE_INTERVAL,
                0f,
                this
            )
        } catch (e: Exception) {
            Log.e("LocationService", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: ${e.message}")
        }
        broadcastMode()
    }

    private fun switchToIdleMode() {
        loadSettings()
        Log.d("LocationService", "üîÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≠–ö–û–ù–û–ú —Ä–µ–∂–∏–º (—Ç–∞–π–º–∞—É—Ç: $inactivityTimeout –º—Å)")
        isInActiveMode = false
        try {
            locationManager.removeUpdates(this)
            if (!hasLocationPermission()) return
            if (ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_FINE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                    this,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return
            }
            locationManager.requestLocationUpdates(
                LocationManager.GPS_PROVIDER,
                inactivityTimeout,
                0f,
                this
            )
        } catch (e: Exception) {
            Log.e("LocationService", "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ idle —Ä–µ–∂–∏–º: ${e.message}")
        }
        broadcastMode()
    }

    private fun setupStepSensor() {
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        val stepSensor = sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER)
        if (stepSensor != null) {
            sensorManager.registerListener(this, stepSensor, SensorManager.SENSOR_DELAY_NORMAL)
        } else {
            Log.w("LocationService", "–î–∞—Ç—á–∏–∫ —à–∞–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        }
    }

    override fun onSensorChanged(event: SensorEvent) {
        if (event.sensor.type == Sensor.TYPE_STEP_COUNTER) {
            val totalSteps = event.values.firstOrNull() ?: return
            if (initialStepCount == null) {
                initialStepCount = totalSteps
                lastStepCount = totalSteps
                Log.d("LocationService", "üëü Step sensor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: $totalSteps")
                return
            }

            val delta = totalSteps - lastStepCount
            if (delta >= 2f) {
                lastStepCount = totalSteps
                lastStepTime = System.currentTimeMillis()
                Log.d("LocationService", "üëü –†–µ–∞–ª—å–Ω—ã–µ —à–∞–≥–∏: +$delta, –≤—Å–µ–≥–æ: $totalSteps")
            }

            val timeSinceLast = System.currentTimeMillis() - lastStepEventTime
            if (timeSinceLast < 2000L) {
                Log.d("LocationService", "üëü –ò–≥–Ω–æ—Ä. —à–∞–≥ ‚Äî —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ ($timeSinceLast –º—Å)")
                return
            }
            lastStepEventTime = System.currentTimeMillis()
        }
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}

    private fun broadcastLocation(location: Location) {
        val intent = Intent("LOCATION_UPDATE").apply {
            putExtra("latitude", location.latitude)
            putExtra("longitude", location.longitude)
            putExtra("timestamp", System.currentTimeMillis())
            putExtra("mode", if (isInActiveMode) "–ê–ö–¢–ò–í–ù–´–ô" else "–≠–ö–û–ù–û–ú")
        }
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent)
        Log.d("LocationService", "üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    }

    private fun broadcastMode() {
        val intent = Intent("LOCATION_UPDATE").apply {
            putExtra("mode", if (isInActiveMode) "–ê–ö–¢–ò–í–ù–´–ô" else "–≠–ö–û–ù–û–ú")
        }
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent)
        Log.d("LocationService", "üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞: ${if (isInActiveMode) "–ê–ö–¢–ò–í–ù–´–ô" else "–≠–ö–û–ù–û–ú"}")
    }

    private fun startForegroundWithNotification() {
        val channelId = "location_service_channel"
        val channelName = "Location Service"
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val chan = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_LOW)
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.createNotificationChannel(chan)
        }

        val notification = NotificationCompat.Builder(this, channelId)
            .setContentTitle("SafeOrbit")
            .setContentText("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ")
            .setSmallIcon(R.drawable.ic_location)
            .setOngoing(true)
            .build()

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_LOCATION)
        } else {
            startForeground(1, notification)
        }
    }

    private fun hasLocationPermission(): Boolean {
        val fine = ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)
        val coarse = ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION)
        val fg = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE)
            ActivityCompat.checkSelfPermission(this, Manifest.permission.FOREGROUND_SERVICE_LOCATION)
        else PackageManager.PERMISSION_GRANTED

        return fine == PackageManager.PERMISSION_GRANTED &&
                (coarse == PackageManager.PERMISSION_GRANTED || fine == PackageManager.PERMISSION_GRANTED) &&
                fg == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        prefs.unregisterOnSharedPreferenceChangeListener(preferenceChangeListener)
        try {
            locationManager.removeUpdates(this)
            sensorManager.unregisterListener(this)
        } catch (e: Exception) {
            Log.w("LocationService", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: ${e.message}")
        }
    }

    private suspend fun saveActivityLog(
        context: Context,
        startHour: Int,
        endHour: Int,
        steps: Int,
        distance: Float,
        isActive: Boolean
    ) {
        val mode = if (isActive) "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" else "–≠–ö–û–ù–û–ú"
        val log = ActivityLogEntity(
            date = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date()),
            startHour = startHour,
            endHour = endHour,
            mode = mode,
            steps = if (isActive) steps else null,
            distanceMeters = if (isActive) distance else null
        )

        withContext(Dispatchers.IO) {
            val db = Room.databaseBuilder(
                context,
                AppDatabase::class.java, "safeorbit-db"
            ).build()
            db.activityLogDao().insert(log)
        }
    }

    override fun onBind(intent: Intent?): IBinder? = null
}
